FROM ubuntu:22.04

# Dockerfile variables. 
ARG PLATFORM="Linux-x86_64"
ARG CUDA_CC="86"           
ARG CUDA_VER="12.4"  
ARG NVHPC_VER="24.5"
ARG MPI_NVHPC_GPU_ROOT="/opt/mpich_nvhpc_gpu_install_root"
ARG SCRATCH_NVHPC_GPU="/usr/local/nvhpc_gpu"
ARG APP="/app"

# Shell. 
ENV SHELL=/bin/bash
ENV BASH_ENV=~/.bashrc
SHELL ["/bin/bash", "-c"]

# Working directory, make directories, install apt basics. 
RUN mkdir -p /app \
&& mkdir -p ${MPI_NVHPC_GPU_ROOT} \
&& mkdir -p ${SCRATCH_NVHPC_GPU} \
&& mkdir -p ${SCRATCH_NVHPC_GPU}/bin \
&& mkdir -p ${SCRATCH_NVHPC_GPU}/include \
&& mkdir -p ${SCRATCH_NVHPC_GPU}/lib \
&& apt update \
&& apt install -y \
    gpg \
    wget \
    curl \
    build-essential \
    gfortran \
    libtool \
    libtool-bin \
    python3 \ 
    git \
    autoconf \
    vim \
    libgl1-mesa-glx \
    libglu1-mesa \
    mesa-common-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglew-dev \
    libglfw3-dev \
    freeglut3-dev \
    libglm-dev \
    libassimp-dev \
    libsoil-dev \
    libgtk-3-dev \
    pkg-config \
&& git config --global --add safe.directory '*'  

# NVHPC.
RUN curl https://developer.download.nvidia.com/hpc-sdk/ubuntu/DEB-GPG-KEY-NVIDIA-HPC-SDK | gpg --dearmor -o /usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg \
&& echo 'deb [signed-by=/usr/share/keyrings/nvidia-hpcsdk-archive-keyring.gpg] https://developer.download.nvidia.com/hpc-sdk/ubuntu/amd64 /' | tee /etc/apt/sources.list.d/nvhpc.list \
&& apt-get update -y \
&& apt-get install -y nvhpc-24-5 

# Start up scripts and cuda lib links. 
RUN \
# ~/.bashrc
echo -e "\n\
export CUDA_CC=${CUDA_CC} \n\
export CUDA_VER=${CUDA_VER} \n\
export NVHPC_VER=${NVHPC_VER} \n\
export PLATFORM=${PLATFORM} \n\
export MPI_NVHPC_GPU_ROOT=${MPI_NVHPC_GPU_ROOT} \n\
export SCRATCH_NVHPC_GPU=${SCRATCH_NVHPC_GPU} \n\
export APP=${APP} \n\
export NVARCH=`uname -s`_`uname -m` \n\
export NVCOMPILERS=/opt/nvidia/hpc_sdk \n\
export MANPATH=\$MANPATH:\$NVCOMPILERS/\$NVARCH/24.5/compilers/man \n\
export NVHPC_ROOT=\$NVCOMPILERS/\$NVARCH/24.5 \n\
export PREVIOUS_PATH=\$PATH \n\
export PREVIOUS_CPATH=\$CPATH \n\
export PREVIOUS_LIBRARY_PATH=\$LIBRARY_PATH \n\
export PREVIOUS_LD_LIBRARY_PATH=\$LD_LIBRARY_PATH \n\
" > ~/.bashrc  \
# ~/set_nvhpc.sh
&& echo -e "#!/bin/bash\n\
export PATH=\$SCRATCH_NVHPC_GPU/bin:\$MPI_NVHPC_GPU_ROOT/bin:\$NVHPC_ROOT/compilers/bin:\$NVHPC_ROOT/cuda/bin:\$PREVIOUS_PATH \n\
export CPATH=\$SCRATCH_NVHPC_GPU/include:\$MPI_NVHPC_GPU_ROOT/include:\$NVHPC_ROOT/compilers/include:\$NVHPC_ROOT/cuda/include:\$NVHPC_ROOT/math_libs/include \n\
export LIBRARY_PATH=\$SCRATCH_NVHPC_GPU/lib:\$MPI_NVHPC_GPU_ROOT/lib:\$NVHPC_ROOT/compilers/lib:\$NVHPC_ROOT/cuda/lib64:\$NVHPC_ROOT/cuda/lib64/stubs:\$NVHPC_ROOT/math_libs/lib64 \n\
export LD_LIBRARY_PATH=\$SCRATCH_NVHPC_GPU/lib:\$MPI_NVHPC_GPU_ROOT/lib:\$NVHPC_ROOT/compilers/lib:\$NVHPC_ROOT/cuda/lib64:\$NVHPC_ROOT/cuda/lib64/stubs:\$NVHPC_ROOT/math_libs/lib64 \n\
" > ~/set_nvhpc_gpu.sh \
&& chmod u+x ~/set_nvhpc_gpu.sh \
# nvhpc cuda library links.
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& ln -sf $NVHPC_ROOT/cuda/lib64/stubs/libcuda.so $NVHPC_ROOT/cuda/lib64/libcuda.so.1 

# MPICH
# nvhpc gpu.
COPY ./mpich.tar.gz /app/
RUN cd /app \
&& tar -xzvf mpich.tar.gz && mv mpich-4.1.3 mpich \
&& cd /app/mpich \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& CC=nvc CXX=nvc++ FC=nvfortran ./configure --prefix=$MPI_NVHPC_GPU_ROOT --with-cuda=$NVHPC_ROOT/cuda  \
&& make -j8 \
&& make install \
&& cd .. \
&& rm -rf mpich mpich.tar.gz \
&& cd /app

# SCALAPACK. 
# nvhpc gpu.
COPY ./scalapack.tar.gz ./SLmake.inc_nvhpc /app/
RUN cd /app \
&& tar -xzvf scalapack.tar.gz && mv scalapack-2.2.0 scalapack \
&& cd /app/scalapack \
&& cp /app/SLmake.inc_nvhpc /app/scalapack/SLmake.inc \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& make lib \
&& cp ./libscalapack.a $SCRATCH_NVHPC_GPU/lib/libscalapack.a \
&& cd .. \
&& rm -rf scalapack SLmake.inv_nvhpc scalapack.tar.gz \
&& cd /app

# ELPA. 
# nvhpc gpu.
COPY ./elpa.tar.gz /app/
RUN cd /app \
&& tar -xzvf elpa.tar.gz && mv elpa-2024.03.001 elpa \
&& cd /app/elpa \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure \
    --prefix=$SCRATCH_NVHPC_GPU \
    --enable-nvidia-gpu-kernels \
    --with-cuda-path=$NVHPC_ROOT/cuda \
    --with-NVIDIA-GPU-compute-capability=sm_$CUDA_CC  \
    LDFLAGS="-L$SCRATCH_NVHPC_GPU/lib -L$NVHPC_ROOT/compilers/lib" \
    LIBS="$SCRATCH_NVHPC_GPU/lib/libscalapack.a $NVHPC_ROOT/compilers/lib/liblapack.a $NVHPC_ROOT/compilers/lib/libblas.a -lstdc++ -lcudart" \
    CFLAGS="-O3 -fPIC" \
    --disable-sse \
    # --disable-sse-assembly \
    --disable-avx --disable-avx2 --disable-avx512 \
    --disable-shared \
&& make -j8 && make install \
&& cd .. \
&& rm -rf elpa elpa.tar.gz \
&& cp -r $SCRATCH_NVHPC_GPU/include/elpa-2024.03.001/modules/* $SCRATCH_NVHPC_GPU/include/ \
&& cd /app 

# FFTW. 
# nvhpc gpu.
COPY ./fftw3.tar.gz /app/
RUN cd /app \
&& tar -xzvf fftw3.tar.gz && mv fftw-3.3.10 fftw3 \
&& cd  /app/fftw3 \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH_NVHPC_GPU --enable-openmp --enable-mpi \
&& make -j8 && make install \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH_NVHPC_GPU --enable-openmp --enable-mpi --enable-single \
&& make -j8 && make install \
&& cd .. \
&& rm -rf fftw3 fftw3.tar.gz \ 
&& cd /app

# HDF5. 
# nvhpc gpu.
COPY ./hdf5.tar.gz /app/
RUN cd /app \
&& tar -xzvf hdf5.tar.gz && mv hdf5-1.14.4-2 hdf5 \
&& cd /app/hdf5 \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& CC=mpicc FC=mpif90 ./configure --prefix=$SCRATCH_NVHPC_GPU --enable-fortran --enable-shared --enable-parallel \
# --disable-tests \
&& make -j8 && make install \
&& cd .. \
&& rm -rf hdf5 hdf5.tar.gz \
&& cd /app

# QE. 
# Even if the make all fails first time, it seems to pick up and build correct second time, so will do that. 
# nvhpc gpu.
COPY ./qe.tar.gz ./kmesh.pl ./qe_nvhpc_gpu_make.inc ./qe_nvhpc_cpu_make.inc /app/
RUN cd /app \
&& tar -xzvf qe.tar.gz && mv /app/qe-7.2 /app/qe \
&& tar -xzvf qe.tar.gz && mv /app/qe-7.2 /app/qe-cpu \
&& cd /app/qe \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure \
    --prefix=$SCRATCH_NVHPC_GPU \
    --with-hdf5=yes \
    # --with-scalapack=yes \
    --with-cuda=$NVHPC_ROOT/cuda \
    --with-cuda-cc=$CUDA_CC \ 
    --with-cuda-runtime=$CUDA_VER \
    --enable-debug \
&& cp /app/qe_nvhpc_gpu_make.inc /app/qe/make.inc \
&& make all -j8 || true && make all -j8 && make install \
&& cd .. \
# && rm -rf qe \
# nvhpc cpu.
&& cd /app/qe-cpu \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure \
    --prefix=$(pwd) \
    --with-hdf5=yes \
    --with-scalapack=yes \ 
    #  --enable-debug \
&& cp /app/qe_nvhpc_cpu_make.inc /app/qe-cpu/make.inc \
&& make all -j8 || true && make all -j8 && make epw -j8 \
&& cd .. \
&& rm -rf /app/qe.tar.gz /app/qe_nvhpc_gpu_make.inc /app/qe_nvhpc_cpu_make.inc \
&& mv /app/kmesh.pl $SCRATCH_NVHPC_GPU/bin/ \
&& cd /app

# BGW. 
# nvhpc gpu.
COPY ./bgw.tar.gz ./arch_nvhpc_gpu.mk ./arch_nvhpc_cpu.mk /app/
RUN cd /app \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw-cpu && tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw \
&& cd /app/bgw \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& cp /app/arch_nvhpc_gpu.mk /app/bgw/arch.mk \
&& make all-flavors -j8 \
&& make install INSTDIR=$SCRATCH_NVHPC_GPU \
&& cd .. \
&& rm -rf bgw bgw.tar.gz arch_nvhpc_gpu.mk \
# nvhpc cpu.
&& cd /app/bgw-cpu \
&& cp /app/arch_nvhpc_cpu.mk /app/bgw-cpu/arch.mk \
&& make all-flavors -j8 \
&& cd .. \
&& rm -rf arch_nvhpc_cpu.mk \
&& cd /app

# Miniconda.
RUN cd /app \ 
&& wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-${PLATFORM}.sh \
&& chmod u+x ./miniconda.sh \
&& ./miniconda.sh -b -p $HOME/miniconda \
&& rm -rf ./miniconda.sh \
&& $HOME/miniconda/bin/conda init \
&& echo -e "#!/bin/bash\n\
conda deactivate \n\
export PREVIOUS_PATH=\$PATH\n\
export PATH=\$SCRATCH_NVHPC_GPU/bin:\$MPI_NVHPC_GPU_ROOT/bin:\$NVHPC_ROOT/compilers/bin:\$NVHPC_ROOT/cuda/bin:\$PREVIOUS_PATH \n\
export CPATH=\$SCRATCH_NVHPC_GPU/include:\$MPI_NVHPC_GPU_ROOT/include:\$NVHPC_ROOT/compilers/include:\$NVHPC_ROOT/cuda/include:\$NVHPC_ROOT/math_libs/include \n\
export LIBRARY_PATH=\$SCRATCH_NVHPC_GPU/lib:\$MPI_NVHPC_GPU_ROOT/lib:\$NVHPC_ROOT/compilers/lib:\$NVHPC_ROOT/cuda/lib64:\$NVHPC_ROOT/cuda/lib64/stubs:\$NVHPC_ROOT/math_libs/lib64 \n\
export LD_LIBRARY_PATH=\$SCRATCH_NVHPC_GPU/lib:\$MPI_NVHPC_GPU_ROOT/lib:\$NVHPC_ROOT/compilers/lib:\$NVHPC_ROOT/cuda/lib64:\$NVHPC_ROOT/cuda/lib64/stubs:\$NVHPC_ROOT/math_libs/lib64 \n\
# >>> conda initialize >>> \n\
# !! Contents within this block are managed by 'conda init' !! \n\
__conda_setup=\"\$('/root/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" \n\
if [ \$? -eq 0 ]; then \n\
    eval \"\$__conda_setup\" \n\
else \n\
    if [ -f \"/root/miniconda/etc/profile.d/conda.sh\" ]; then \n\
        . \"/root/miniconda/etc/profile.d/conda.sh\" \n\
    else \n\
        export PATH=\"/root/miniconda/bin:\$PATH\" \n\
    fi \n\
fi \n\
unset __conda_setup \n\
# <<< conda initialize <<< \n\
" > ~/set_nvhpc_gpu.sh \
&& chmod u+x ~/set_nvhpc_gpu.sh 

# Configure conda-forge and mamba.
RUN cd /app \ 
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \ 
&& conda config --add channels conda-forge && conda config --set channel_priority strict \
&& conda install -y mamba \
&& mamba install -y numpy \
&& mamba install -y cupy \
&& mamba install -y pandas \
&& mamba install -y scipy \
&& mamba install -y sympy \
&& mamba install -y h5py \
&& mamba install -y pyqt \
&& mamba install -y matplotlib \
&& mamba install -y seaborn \
# && pip3 install -q pyvista[all] \
&& pip3 install -q pyvista \
&& pip3 install -q pyvistaqt \
&& pip3 install -q jupyterlab \
&& mamba install -y ase \
&& mamba install -y dill \
&& mamba install -y pyyaml \
&& cd /app 

# Install additional libraries if needed. 
COPY ./bgw.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc && source ~/set_nvhpc_gpu.sh \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw \
&& cd /app/bgw/xctph \
&& pip3 install . \
# && pip3 install -q fp-workflow \
&& cd /app \
&& rm -rf bgw bgw.tar.gz \
&& cd /app

# Add actual cuda libraries linking if needed.  
RUN echo -e "\n\
export LIBCUDA_PATH=\$(find /usr/lib/wsl -name 'libcuda.so*' | head -n 1) \n \
\n\
if [ -n \"\$LIBCUDA_PATH\" ]; then \n \
    export LIBCUDA_DIR=\$(find /usr/lib/wsl -name 'libcuda.so*' -exec dirname {} \; | head -n 1 ) \n \
    export PREVIOUS_LIBRARY_PATH=\$LIBCUDA_DIR:\$PREVIOUS_LIBRARY_PATH \n \
    export PREVIOUS_LD_LIBRARY_PATH=\$LIBCUDA_DIR:\$PREVIOUS_LD_LIBRARY_PATH \n \
    ln -sf \$LIBCUDA_PATH \$NVHPC_ROOT/cuda/lib64/stubs/libcuda.so; \n \
fi \n\
" >> ~/.bashrc

# Finally set the working directory to home directory. 
WORKDIR /app

CMD ["/bin/bash"]