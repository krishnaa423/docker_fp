FROM ubuntu:22.04

# Dockerfile variables. 
ARG PLATFORM="Linux-x86_64"
ARG IHPC_ROOT="/opt/intel/oneapi"
ARG MPI_IHPC_CPU_ROOT="/opt/intel/oneapi/mpi/latest"
ARG SCRATCH_IHPC_CPU="/usr/local/ihpc_cpu"
ARG APP="/app"

# Shell. 
ENV SHELL=/bin/bash
ENV BASH_ENV=~/.bashrc
SHELL ["/bin/bash", "-c"]

# Working directory.
RUN mkdir -p /app \
&& mkdir -p ${MPI_IHPC_CPU_ROOT} \
&& mkdir -p ${SCRATCH_IHPC_CPU}/bin \
&& mkdir -p ${SCRATCH_IHPC_CPU}/include \
&& mkdir -p ${SCRATCH_IHPC_CPU}/lib \ 
&& apt update \
&& apt install -y \
    gpg \
    gpg-agent \
    wget \
    curl \
    build-essential \
    gfortran \
    libtool \
    libtool-bin \
    python3 \ 
    git \
    autoconf \
    vim \
    libgl1-mesa-glx \
    libglu1-mesa \
    mesa-common-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglew-dev \
    libglfw3-dev \
    freeglut3-dev \
    libglm-dev \
    libassimp-dev \
    libsoil-dev \
    libgtk-3-dev \
    pkg-config \
&& git config --global --add safe.directory '*'  

# Intel HPC. 
RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null \
&& echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list \
&& apt update \
&& apt install -y intel-hpckit 

# Start up scripts. 
RUN \
# ~/.bashrc
echo -e "\n\
export PLATFORM=${PLATFORM} \n\
export IHPC_ROOT=${IHPC_ROOT} \n\
export MPI_NVHPC_GPU_ROOT=${MPI_NVHPC_GPU_ROOT} \n\
export SCRATCH_IHPC_CPU=${SCRATCH_IHPC_CPU} \n\
export APP=${APP} \n\
export PREVIOUS_PATH=\$PATH \n\
export PREVIOUS_CPATH=\$CPATH \n\
export PREVIOUS_LIBRARY_PATH=\$LIBRARY_PATH \n\
export PREVIOUS_LD_LIBRARY_PATH=\$LD_LIBRARY_PATH \n\
" > ~/.bashrc  \
# ~/set_nvhpc.sh
&& echo -e "#!/bin/bash\n\
export PATH=\$SCRATCH_IHPC_CPU/bin:\$MPI_IHPC_CPU_ROOT/bin:\$PREVIOUS_PATH \n\
export CPATH=\$SCRATCH_IHPC_CPU/include:\$MPI_IHPC_CPU_ROOT/include \n\
export LIBRARY_PATH=\$SCRATCH_IHPC_CPU/lib:\$MPI_IHPC_CPU_ROOT/lib \n\
export LD_LIBRARY_PATH=\$SCRATCH_IHPC_CPU/lib:\$MPI_IHPC_CPU_ROOT/lib \n\
if [ -z \"\$MKLROOT\" ]; then source \$IHPC_ROOT/setvars.sh; fi \n\
" > ~/set_ihpc_cpu.sh \
&& chmod u+x ~/set_ihpc_cpu.sh 

# # ELPA. 
COPY ./elpa.tar.gz /app/
RUN cd /app \ 
&& tar -xzvf elpa.tar.gz && mv elpa-2024.03.001 elpa \
&& cd /app/elpa \
# Can skip the C++ compiler apparently. Atleast on TACC Frontera cluster. 
# On Frontera had to also change locale info based on error pasted into chatgpt.
# export LANG=en_US.utf-8
# export LANGUAGE=en_US.utf-8
# export LC_ALL=en_US.utf-8
&& source ~/.bashrc && source ~/set_ihpc_cpu.sh \
&& FC=mpiifx CXX=mpiicpx CC=mpiicx ./configure \
    --prefix=$SCRATCH_IHPC_CPU \
    FCFLAGS="-O3 -fPIC" \
    CFLAGS="-O3 -fPIC" \
    --enable-option-checking=fatal \
    SCALAPACK_LDFLAGS="-L$MKLROOT/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread " \
    SCALAPACK_FCFLAGS="-I$MKL_HOME/include/intel64/lp64" \
    --disable-sse \ 
    --disable-avx --disable-avx2 --disable-avx512 \
    --disable-shared \
&& make -j8 && make install \
&& cd .. \
&& rm -rf elpa elpa.tar.gz \
&& cp -r $SCRATCH_IHPC_CPU/include/elpa-2024.03.001/modules/* $SCRATCH_IHPC_CPU/include/ \
&& cd /app

# HDF5. 
COPY ./hdf5.tar.gz /app/
RUN cd /app \
&& tar -xzvf hdf5.tar.gz && mv hdf5-1.14.4-2 hdf5 \
&& cd /app/hdf5 \
&& source ~/.bashrc && source ~/set_ihpc_cpu.sh \
&& CC=mpiicx FC=mpiifx ./configure --prefix=$SCRATCH_IHPC_CPU --enable-fortran --enable-shared --enable-parallel \
&& make -j8 && make install \
&& cd .. \
&& rm -rf hdf5 hdf5.tar.gz \
&& cd /app

# QE. 
COPY ./qe.tar.gz ./kmesh.pl /app/
RUN tar -xzvf qe.tar.gz
WORKDIR /app/q-e
RUN source ~/.bashrc \
&& CC=mpiicx CXX=mpiicpx FC=mpiifx ./configure --prefix=$SCRATCH_IHPC_CPU --with-hdf5=yes --with-scalapack=intel --with-elpa-include=$SCRATCH_IHPC_CPU/include --with-elpa-lib=$SCRATCH_IHPC_CPU/lib/libelpa.a
# Even if the make all fails first time, it seems to pick up and build correct second time, so will do that. 
RUN source ~/.bashrc && make all -j8 || true && make all -j8 && make epw -j8 && make install \
&& cd .. \
&& cp  /app/kmesh.pl $SCRATCH_IHPC_CPU/bin/ \
&& rm -rf q-e qe.tar.gz kmesh.pl
WORKDIR /app

# BGW. 
COPY ./bgw.tar.gz ./arch_intelhpc.mk /app/
RUN cd /app \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw \
&& cd /app/bgw \
&& cd source ~/.bashrc && source ~/set_ihpc_cpu.sh \
&& cp ../arch_intelhpc.mk ./arch.mk \
&& make all-flavors -j8 \
&& make install INSTDIR=$SCRATCH_IHPC_CPU \
&& cd .. \
&& rm -rf bgw bgw.tar.gz arch_intelhpc.mk \
&& cd /app


# Miniconda.
#packages: numpy, cupy, pandas, scipy, sympy, mpi4py (pip over local), h5py (pip over hdf5 local), petsc4py (pip over local), slepc4py (pip over local)
# pyqt, matplotlib, seaborn, pyvista, pyvistaqt, ase. 

# For silent installation. 
RUN wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-${PLATFORM}.sh \
&& chmod u+x ./miniconda.sh \
&& ./miniconda.sh -b -p $HOME/miniconda \
&& rm -rf ./miniconda.sh \
&& $HOME/miniconda/bin/conda init 
# && echo -e "#!/bin/bash\n\
# conda deactivate \n\
# export PATH=\$SCRATCH_IHPC_CPU/bin:\$MPI_IHPC_CPU_ROOT/bin:\$PREVIOUS_PATH \n\
# export CPATH=\$SCRATCH_IHPC_CPU/include:\$MPI_IHPC_CPU_ROOT/include \n\
# export LIBRARY_PATH=\$SCRATCH_IHPC_CPU/lib:\$MPI_IHPC_CPU_ROOT/lib \n\
# export LD_LIBRARY_PATH=\$SCRATCH_IHPC_CPU/lib:\$MPI_IHPC_CPU_ROOT/lib \n\
# if [ -z \"\$MKLROOT\" ]; then source \$IHPC_ROOT/setvars.sh; fi \n\
# # >>> conda initialize >>> \n\
# # !! Contents within this block are managed by 'conda init' !! \n\
# __conda_setup=\"\$('/root/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" \n\
# if [ \$? -eq 0 ]; then \n\
#     eval \"\$__conda_setup\" \n\
# else \n\
#     if [ -f \"/root/miniconda/etc/profile.d/conda.sh\" ]; then \n\
#         . \"/root/miniconda/etc/profile.d/conda.sh\" \n\
#     else \n\
#         export PATH=\"/root/miniconda/bin:\$PATH\" \n\
#     fi \n\
# fi \n\
# unset __conda_setup \n\
# # <<< conda initialize <<< \n\
# " > ~/set_ihpc_cpu.sh \
# && chmod u+x ~/set_ihpc_cpu.sh

# # Configure conda-forge and mamba.
# COPY ./petsc.tar.gz ./slepc.tar.gz /app/
# RUN cd /app \
# && source ~/.bashrc && source ~/set_ihpc_cpu.sh \ 
# && conda config --add channels conda-forge && conda config --set channel_priority strict \
# && conda install -y mamba \
# && mamba install -y numpy \
# && mamba install -y pandas \
# && mamba install -y scipy \
# && mamba install -y sympy \
# && MPICC=mpiicx CC=icx pip3 install mpi4py --no-binary=mpi4py \
# && CC=mpiicx HDF5_MPI="ON" HDF5_DIR="$SCRATCH_IHPC_CPU" pip3 install h5py --no-binary=h5py \
# && conda deactivate \
# && tar -xzvf petsc.tar.gz && mv petsc-3.21.4 petsc \
# && cd /app/petsc \
# && ./configure --prefix=$SCRATCH_IHPC_CPU --with-cc=mpiicx --with-cxx=mpiicpx --with-fc=mpiifx --with-python-exec=$HOME/miniconda/bin/python3 --with-petsc4py=1 \
# && make all -j8 && make install \
# && cd .. \
# && rm -rf petsc petsc.tar.gz \
# && echo -e "export PYTHONPATH=\"$SCRATCH_IHPC_CPU/lib:\$PYTHONPATH\" \n" >> ~/set_ihpc_cpu.sh \
# && tar -xzvf slepc.tar.gz && mv slepc-3.21.1 slepc \
# && cd /app/slepc \
# && CC=mpiicx CXX=mpiicpx FC=mpiifx PETSC_DIR=$SCRATCH_IHPC_CPU ./configure --prefix=$SCRATCH_IHPC_CPU \
# && make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH_IHPC_CPU -j8 && make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH_IHPC_CPU install \
# && cd .. \
# && rm -rf slepc slepc.tar.gz \
# && conda activate \
# && CC=mpiicx CXX=mpiicpx FC=mpiifx PETSC_DIR=$SCRATCH_IHPC_CPU SLEPC_DIR=$SCRATCH_IHPC_CPU pip3 install  -q --no-binary=slepc4py slepc4py \
# && mamba install -y pyqt \
# && mamba install -y matplotlib \
# && mamba install -y seaborn \
# && pip3 install -q pyvista \
# && pip3 install -q pyvistaqt \
# && pip3 install -q jupyterlab \
# && mamba install -y ase \
# && mamba install -y dill \
# && mamba install -y pyyaml \
# && cd /app 

# Finally set the working directory to home directory. 
WORKDIR /app

CMD ["/bin/bash"]