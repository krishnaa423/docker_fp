FROM ubuntu:22.04

# Dockerfile variables. 
ARG PLATFORM="Linux-x86_64"
# Set the compute capability for cuda. Also don't forget to set the same value in arch_nvhpc.mk too. 
# You can figure out the compute capability value by running pgaccelinfo command in the cli.          
# ARG PLATFORM="MacOSX-arm64"
# ARG PLATFORM="Linux-ppc64le"

# Shell. 
ENV SHELL=/bin/bash
ENV BASH_ENV=~/.bashrc
ENV PLATFORM=${PLATFORM}
ENV IHPC_ROOT="/opt/intel/oneapi"
ENV MPI_IHPC_CPU_ROOT="/opt/intel/oneapi/mpi/latest"
ENV SCRATCH="/usr/local"
ENV APP="/app"
SHELL ["/bin/bash", "-c"]

# Working directory.
RUN mkdir -p /app
WORKDIR /app

# apt requirements. 
RUN apt update \
&& apt install -y gpg gpg-agent wget curl build-essential libtool libtool-bin python3 git \
&& git config --global --add safe.directory '*'  

# Intel HPC. 
RUN wget -O- https://apt.repos.intel.com/intel-gpg-keys/GPG-PUB-KEY-INTEL-SW-PRODUCTS.PUB | gpg --dearmor | tee /usr/share/keyrings/oneapi-archive-keyring.gpg > /dev/null \
&& echo "deb [signed-by=/usr/share/keyrings/oneapi-archive-keyring.gpg] https://apt.repos.intel.com/oneapi all main" | tee /etc/apt/sources.list.d/oneAPI.list \
&& apt update \
&& apt install -y intel-hpckit 

# Add Intel HPC environment to bashrc. Add a link to the stub. 
RUN echo -e "if [ -z \"\$MKLROOT\" ]; then source \$IHPC_ROOT/setvars.sh; fi \n" > ~/.bashrc 

# Update bashrc. 
RUN echo -e "\n\
export PATH=\"\$SCRATCH/bin:\$PATH\" \n\
export CPATH=\"\$SCRATCH/include:\$CPATH\" \n\
export LIBRARY_PATH=\"\$SCRATCH/lib:\$LIBRARY_PATH\" \n\
export LD_LIBRARY_PATH=\"\$SCRATCH/lib:\$LD_LIBRARY_PATH\" \n\
" >> ~/.bashrc 

# # ELPA. 
COPY ./elpa.tar.gz /app/
RUN tar -xzvf elpa.tar.gz && mv elpa-2024.03.001 elpa
WORKDIR /app/elpa
# Can skip the C++ compiler apparently. Atleast on TACC Frontera cluster. 
# On Frontera had to also change locale info based on error pasted into chatgpt.
# export LANG=en_US.utf-8
# export LANGUAGE=en_US.utf-8
# export LC_ALL=en_US.utf-8
RUN source ~/.bashrc \
&& FC=mpiifx \
CXX=mpiicpx \
CC=mpiicx ./configure -prefix=$SCRATCH FCFLAGS="-O3 -fPIC" CFLAGS="-O3 -fPIC" \
--enable-option-checking=fatal SCALAPACK_LDFLAGS="-L$MKLROOT/lib/intel64 -lmkl_scalapack_lp64 -lmkl_intel_lp64 -lmkl_sequential -lmkl_core -lmkl_blacs_intelmpi_lp64 -lpthread " \
SCALAPACK_FCFLAGS="-I$MKL_HOME/include/intel64/lp64" \
--disable-sse --disable-avx --disable-avx2 --disable-avx512 --disable-shared \
&& make -j8 && make install \
&& cd .. \
&& rm -rf elpa elpa.tar.gz \
&& cp -r $SCRATCH/include/elpa-2024.03.001/modules/* $SCRATCH/include/
WORKDIR /app

# HDF5. 
COPY ./hdf5.tar.gz /app/
RUN tar -xzvf hdf5.tar.gz && mv hdf5-1.14.4-2 hdf5
WORKDIR /app/hdf5
RUN source ~/.bashrc \
&& CC=mpiicx FC=mpiifx ./configure --prefix=$SCRATCH --enable-fortran --enable-shared --enable-parallel \
&& make -j8 && make install \
&& cd .. \
&& rm -rf hdf5 hdf5.tar.gz
WORKDIR /app

# QE. 
COPY ./qe.tar.gz /app/
RUN tar -xzvf qe.tar.gz
WORKDIR /app/q-e
RUN source ~/.bashrc \
&& CC=mpiicx CXX=mpiicpx FC=mpiifx ./configure --prefix=$SCRATCH --with-hdf5=yes --with-scalapack=intel --with-elpa-include=$SCRATCH/include --with-elpa-lib=$SCRATCH/lib/libelpa.a
# Even if the make all fails first time, it seems to pick up and build correct second time, so will do that. 
RUN source ~/.bashrc && make all -j8 || true && make all -j8 && make epw -j8 && make install \
&& cd .. \
&& rm -rf q-e qe.tar.gz
WORKDIR /app

# BGW. 
COPY ./bgw.tar.gz /app/
COPY ./arch_intelhpc.mk /app/
RUN tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw
WORKDIR /app/bgw
RUN source ~/.bashrc \
&& cp ../arch_intelhpc.mk ./arch.mk \
&& make all-flavors -j8 \
&& make install INSTDIR=$SCRATCH \
&& cd .. \
&& rm -rf bgw bgw.tar.gz arch_intelhpc.mk
WORKDIR /app


# Miniconda.
#packages: numpy, cupy, pandas, scipy, sympy, mpi4py (pip over local), h5py (pip over hdf5 local), petsc4py (pip over local), slepc4py (pip over local)
# pyqt, matplotlib, seaborn, pyvista, pyvistaqt, ase. 

# For silent installation. 
RUN wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-${PLATFORM}.sh \
&& chmod u+x ./miniconda.sh \
&& ./miniconda.sh -b -p $HOME/miniconda \
&& rm -rf ./miniconda.sh \
&& $HOME/miniconda/bin/conda init

# Configure conda-forge and mamba.
RUN source ~/.bashrc \ 
&& conda config --add channels conda-forge && conda config --set channel_priority strict \
&& conda install -y mamba 

RUN source ~/.bashrc \
&& mamba install -y numpy

RUN source ~/.bashrc \
&& mamba install -y pandas

RUN source ~/.bashrc \
&& mamba install -y scipy

RUN source ~/.bashrc \
&& mamba install -y sympy 

# mpi4py. 
# Frontera: Installing pip with --user option helped. Also --force-reinstall --no-cache-dir. 
COPY ./mpi4py.tar.gz /app/
RUN tar -xzvf mpi4py.tar.gz && mv mpi4py-3.1.6 mpi4py
WORKDIR /app/mpi4py
RUN source ~/.bashrc \
&& MPICC=mpiicx CC=icx pip3 install .  \
&& cd .. \
&& rm -rf mpi4py mpi4py.tar.gz
WORKDIR /app

# h5py. 
COPY ./h5py.tar.gz /app/
RUN tar -xzvf h5py.tar.gz 
WORKDIR /app/h5py
RUN source ~/.bashrc \
&& CC=mpiicx HDF5_MPI="ON" HDF5_DIR="$SCRATCH" pip3 install . \
&& cd .. \
&& rm -rf h5py h5py.tar.gz
WORKDIR /app

# PETSC and petsc4py.  
COPY ./petsc.tar.gz /app/
RUN tar -xzvf petsc.tar.gz && mv petsc-3.21.3 petsc
WORKDIR /app/petsc
RUN source ~/.bashrc \
&& conda deactivate \
&& ./configure --prefix=$SCRATCH --with-cc=mpiicx --with-cxx=mpiicpx --with-fc=mpiifx --with-python-exec=$HOME/miniconda/bin/python3 --with-petsc4py=1 \
# Frontera: && ./configure --prefix=$SCRATCH --with-cc=mpicc --with-cxx=mpicxx --with-fc=mpif90 --with-python-exec=$SCRATCH/miniconda/bin/python3 --with-petsc4py=1 \
&& make all -j8 && make install \
&& cd .. \
&& rm -rf petsc petsc.tar.gz \
&& echo -e "export PYTHONPATH=\"$SCRATCH/lib:\$PYTHONPATH\" \n" >> ~/.bashrc 
WORKDIR /app

# SLEPC. 
COPY ./slepc.tar.gz /app/
RUN tar -xzvf slepc.tar.gz && mv slepc-3.21.1 slepc
WORKDIR /app/slepc
RUN source ~/.bashrc \
&& conda deactivate \
&& CC=mpiicx CXX=mpiicpx FC=mpiifx PETSC_DIR=$SCRATCH ./configure --prefix=$SCRATCH \
# Frontera: && CC=mpicc CXX=mpicxx FC=mpif90 PETSC_DIR=$SCRATCH ./configure --prefix=$SCRATCH \
&& make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH -j8 && make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH install \
&& cd .. \
&& rm -rf slepc slepc.tar.gz
WORKDIR /app

# slepc4py. 
RUN source ~/.bashrc \
&& CC=mpiicx CXX=mpiicpx FC=mpiifx PETSC_DIR=$SCRATCH SLEPC_DIR=$SCRATCH pip3 install  -q --no-binary=slepc4py slepc4py 
# && Frontera: CC=mpicc CXX=mpicxx FC=mpif90 PETSC_DIR=$SCRATCH SLEPC_DIR=$SCRATCH pip3 install --no-binary=slepc4py slepc4py 

RUN source ~/.bashrc \
&& mamba install -y pyqt 

RUN source ~/.bashrc \
&& mamba install -y matplotlib

RUN source ~/.bashrc \
&& mamba install -y seaborn

RUN source ~/.bashrc \
&& mamba install -y pyvista 

RUN source ~/.bashrc \
&& mamba install -y pyvistaqt

RUN source ~/.bashrc \
&& mamba install -y ase

RUN source ~/.bashrc \
&& pip3 install -q dill 

RUN source ~/.bashrc \
&& pip3 install -q pyyaml

# pytorch

# torchvision

# torch geometric

# e3nn

# gpaw 

# Post execs, libraries install steps. Here just copying some files. Could have done it earlier, but don't wanna compile again. 
COPY ./kmesh.pl $SCRATCH/bin/

# Finally set the working directory to home directory. 
WORKDIR /app

CMD ["/bin/bash"]