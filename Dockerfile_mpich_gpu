FROM ubuntu:22.04

# Dockerfile variables. 
ARG PLATFORM="Linux-x86_64"     
ARG CUDA_CC="86"           
ARG CUDA_VER="12.4"  
ARG CUDA_ROOT="/usr/local/cuda"
ARG MPI_GCC_GPU_ROOT="/opt/mpich_gcc_gpu_install_root"
ARG SCRATCH_GCC_GPU="/usr/local/gcc_gpu"
ARG APP="/app"

# Shell. 
ENV SHELL=/bin/bash
ENV BASH_ENV=~/.bashrc
SHELL ["/bin/bash", "-c"]

# Working directory, make directories, install some apt packges (what ever I feel like). 
RUN mkdir -p /app \
&& mkdir -p ${MPI_GCC_GPU_ROOT} \
&& mkdir -p ${SCRATCH_GCC_GPU} \
&& mkdir -p ${SCRATCH_GCC_GPU}/bin \
&& mkdir -p ${SCRATCH_GCC_GPU}/include \
&& mkdir -p ${SCRATCH_GCC_GPU}/lib \
&& apt update \
&& apt install -y \
    gpg \
    wget \
    curl \
    build-essential \
    gfortran \
    libtool \
    libtool-bin \
    python3 \ 
    git \
    autoconf \
    vim \
    libgl1-mesa-glx \
    libglu1-mesa \
    mesa-common-dev \
    libgl1-mesa-dev \
    libglu1-mesa-dev \
    libglew-dev \
    libglfw3-dev \
    freeglut3-dev \
    libglm-dev \
    libassimp-dev \
    libsoil-dev \
    libgtk-3-dev \
    pkg-config \
&& git config --global --add safe.directory '*'  

# CUDA. 
RUN wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu2204/x86_64/cuda-keyring_1.1-1_all.deb \
&& dpkg -i cuda-keyring_1.1-1_all.deb \
&& rm -rf cuda-keyring_1.1-1_all.deb \
&& apt-get update \
&& apt-get -y install cuda-toolkit-12-4

# Start up scripts and cuda lib links. 
RUN \
# ~/.bashrc
echo -e "\n\
export CUDA_CC=${CUDA_CC} \n\
export CUDA_VER=${CUDA_VER} \n\
export CUDA_ROOT=${CUDA_ROOT} \n\
export NVHPC_VER=${NVHPC_VER} \n\
export PLATFORM=${PLATFORM} \n\
export MPI_GCC_GPU_ROOT=${MPI_GCC_GPU_ROOT} \n\
export SCRATCH_GCC_GPU=${SCRATCH_GCC_GPU} \n\
export APP=${APP} \n\
export PREVIOUS_PATH=\$PATH \n\
export PREVIOUS_CPATH=\$CPATH \n\
export PREVIOUS_LIBRARY_PATH=\$LIBRARY_PATH \n\
export PREVIOUS_LD_LIBRARY_PATH=\$LD_LIBRARY_PATH \n\
" > ~/.bashrc  \
# ~/set_gcc.sh
&& echo -e "#!/bin/bash\n\
export PATH=\$SCRATCH_GCC_GPU/bin:\$MPI_GCC_GPU_ROOT/bin:\$CUDA_ROOT/bin:\$PREVIOUS_PATH\n\
export CPATH=\$SCRATCH_GCC_GPU/include:\$MPI_GCC_GPU_ROOT/include:\$CUDA_ROOT/include\n\
export LIBRARY_PATH=\$SCRATCH_GCC_GPU/lib:\$MPI_GCC_GPU_ROOT/lib:\$CUDA_ROOT/lib64:\$CUDA_ROOT/lib64/stubs\n\
export LD_LIBRARY_PATH=\$SCRATCH_GCC_GPU/lib:\$MPI_GCC_GPU_ROOT/lib:\$CUDA_ROOT/lib64:\$CUDA_ROOT/lib64/stubs\n\
" > ~/set_gcc_gpu.sh \
&& chmod u+x ~/set_gcc_gpu.sh \
# cuda library links.
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& ln -sf $CUDA_ROOT/lib64/stubs/libcuda.so $CUDA_ROOT/lib64/libcuda.so.1 

# MPICH
# gcc gpu.
COPY ./mpich.tar.gz /app/
RUN cd /app \
&& tar -xzvf mpich.tar.gz && mv mpich-4.1.3 mpich \
&& cd /app/mpich \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& CC=gcc CXX=g++ FC=gfortran ./configure --prefix=$MPI_GCC_GPU_ROOT --with-cuda=$CUDA_ROOT  \
&& make -j8 \
&& make install \
&& cd .. \
&& rm -rf mpich mpich.tar.gz \
&& cd /app


# OpenBLAS. 
# gcc cpu.
COPY ./openblas.tar.gz /app/
RUN cd /app \
&& tar -xzvf openblas.tar.gz && mv OpenBLAS-0.3.27 openblas \
&& cd /app/openblas \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& make USE_OPENMP=1 -j8 \
&& make install PREFIX=$SCRATCH_GCC_GPU \
&& cd .. \
&& rm -rf openblas openblas.tar.gz \
&& cd /app

# SCALAPACK. 
# gcc cpu.
COPY ./scalapack.tar.gz ./SLmake.inc_mpich_openmpi /app/
RUN cd /app \
&& tar -xzvf scalapack.tar.gz && mv scalapack-2.2.0 scalapack \
&& cd /app/scalapack \
&& cp /app/SLmake.inc_mpich_openmpi /app/scalapack/SLmake.inc \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& make lib \
&& cp ./libscalapack.a $SCRATCH_GCC_GPU/lib/libscalapack.a \
&& cd .. \
&& rm -rf scalapack SLmake.inc_mpich_openmpi scalapack.tar.gz \
&& cd /app           

# ELPA. 
# gcc cpu.
COPY ./elpa.tar.gz /app/ 
RUN cd /app \
&& tar -xzvf elpa.tar.gz && mv elpa-2024.03.001 elpa \
&& cd /app/elpa \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure \
    --prefix=$SCRATCH_GCC_GPU \
    # --enable-nvidia-gpu-kernels \
    # --with-cuda-path=$CUDA_ROOT \
    # --with-NVIDIA-GPU-compute-capability=sm_$CUDA_CC  \
    # LDFLAGS="-L$SCRATCH_GCC_GPU/lib -L$CUDA_ROOT/lib64" \
    LDFLAGS="-L$SCRATCH_GCC_GPU/lib" \
    # LIBS="$SCRATCH_GCC_GPU/lib/libscalapack.a $SCRATCH_GCC_GPU/lib/libopenblas.a -lcudart" \
    LIBS="$SCRATCH_GCC_GPU/lib/libscalapack.a $SCRATCH_GCC_GPU/lib/libopenblas.a" \
    CFLAGS="-O3 -fPIC" \
    --disable-sse \
    --disable-avx --disable-avx2 --disable-avx512 \
    --disable-shared \
&& make -j8 && make install \
&& cd .. \
&& rm -rf elpa elpa.tar.gz \
&& cp -r $SCRATCH_GCC_GPU/include/elpa-2024.03.001/modules/* $SCRATCH_GCC_GPU/include/ \
&& cd /app

# FFTW. 
# gcc cpu.
COPY ./fftw3.tar.gz /app/
RUN cd /app \
&& tar -xzvf fftw3.tar.gz && mv fftw-3.3.10 fftw3 \
&& cd /app/fftw3 \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH_GCC_GPU CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared  --enable-openmp --enable-mpi \
&& make -j8 && make install \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=$SCRATCH_GCC_GPU CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared  --enable-openmp --enable-mpi --enable-single \
&& make -j8 && make install \
&& cd .. \
&& rm -rf fftw3 fftw3.tar.gz \
&& cd /app

# HDF5. 
# gcc cpu.
COPY ./hdf5.tar.gz /app/
RUN cd /app \
&& tar -xzvf hdf5.tar.gz && mv hdf5-1.14.4-2 hdf5 \
&& cd /app/hdf5 \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& CC=mpicc FC=mpif90 ./configure --prefix=$SCRATCH_GCC_GPU --enable-fortran --enable-shared --enable-parallel \
&& make -j8 && make install \
&& cd .. \
&& rm -rf hdf5 hdf5.tar.gz \
&& cd /app

# libxc.
COPY ./libxc.tar.gz /app/
RUN cd /app \
&& tar -xvf libxc.tar.gz && mv libxc-6.2.2 libxc \
&& cd /app/libxc \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& autoreconf -i \
&& CC=mpicc FC=mpif90 ./configure CFLAGS="-fPIC" --prefix=$SCRATCH_GCC_GPU \
&& make -j8 && make install \
&& cd /app \
&& rm -rf /app/libxc /app/libxc.tar.gz 

# QE. 
# Even if the make all fails first time, it seems to pick up and build correct second time, so will do that. 
# gcc cpu.
COPY ./qe.tar.gz ./kmesh.pl ./qe_gcc_cpu_make.inc /app/
RUN cd /app \
&& tar -xzvf qe.tar.gz && mv q-e qe-cpu  \
&& cd /app/qe-cpu \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure \
    --prefix=$SCRATCH_GCC_GPU \
    --with-hdf5=yes \
    --with-scalapack=yes \
    --with-elpa-include=$SCRATCH_GCC_GPU/include \
    --with-elpa-lib=$SCRATCH_GCC_GPU/lib/libelpa.a \
    # --enable-debug \
&& cp /app/qe_gcc_cpu_make.inc /app/qe-cpu/make.inc \
&& make all -j8 || true && make all -j8 && make epw && make install \
&& cd .. \
# && rm -rf qe-cpu \
&& rm -rf /app/qe.tar.gz /app/qe_gcc_cpu_make.inc \
&& mv /app/kmesh.pl $SCRATCH_GCC_GPU/bin/ \
&& cd /app

# BGW. 
# gcc gpu.
COPY ./bgw.tar.gz ./arch_gcc_cpu.mk /app/
RUN cd /app \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW bgw-cpu \
&& cd /app/bgw-cpu \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& cp /app/arch_gcc_cpu.mk /app/bgw-cpu/arch.mk \
&& make all-flavors -j8 \
&& make install INSTDIR=$SCRATCH_GCC_GPU \
&& cd .. \
# && rm -rf bgw-cpu \
&& rm -rf /app/bgw.tar.gz /app/arch_gcc_cpu.mk \
&& cd /app

# PETSC. 
# TODO: Perlmutter: Instead, we just install using mamba. 
# gcc cpu.
COPY ./petsc.tar.gz /app/
RUN cd /app \
&& tar -xzvf petsc.tar.gz && mv petsc-3.21.4 petsc \
&& cd /app/petsc \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& ./configure --prefix=$SCRATCH_GCC_GPU \ 
&& make all -j8 && make install \
&& cd .. \
&& rm -rf petsc petsc.tar.gz \
&& cd /app

# SLEPC. 
# TODO: Did not install on NERSC Perlmutter cluster, as errors were encountered. 
# Instead, we just install using mamba. 
# gcc cpu.
COPY ./slepc.tar.gz /app/
RUN cd /app \
&& tar -xzvf slepc.tar.gz && mv slepc-3.21.1 slepc \
&& cd /app/slepc \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& ./configure --prefix=$SCRATCH_GCC_GPU \
&& make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH_GCC_GPU -j8 && make SLEPC_DIR=/app/slepc PETSC_DIR=$SCRATCH_GCC_GPU install \
&& cd .. \
&& rm -rf slepc slepc.tar.gz \
&& cd /app


# Miniconda. 
RUN wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-${PLATFORM}.sh \
&& chmod u+x ./miniconda.sh \
&& ./miniconda.sh -b -p $HOME/miniconda \
&& rm -rf ./miniconda.sh \
&& $HOME/miniconda/bin/conda init \
&& echo -e "#!/bin/bash\n\
conda deactivate \n\
export PATH=\$SCRATCH_GCC_GPU/bin:\$MPI_GCC_GPU_ROOT/bin:\$CUDA_ROOT/bin:\$PREVIOUS_PATH\n\
export CPATH=\$SCRATCH_GCC_GPU/include:\$MPI_GCC_GPU_ROOT/include:\$CUDA_ROOT/include\n\
export LIBRARY_PATH=\$SCRATCH_GCC_GPU/lib:\$MPI_GCC_GPU_ROOT/lib:\$CUDA_ROOT/lib64:\$CUDA_ROOT/lib64/stubs\n\
export LD_LIBRARY_PATH=\$SCRATCH_GCC_GPU/lib:\$MPI_GCC_GPU_ROOT/lib:\$CUDA_ROOT/lib64:\$CUDA_ROOT/lib64/stubs\n\
# >>> conda initialize >>> \n\
# !! Contents within this block are managed by 'conda init' !! \n\
__conda_setup=\"\$('/root/miniconda/bin/conda' 'shell.bash' 'hook' 2> /dev/null)\" \n\
if [ \$? -eq 0 ]; then \n\
    eval \"\$__conda_setup\" \n\
else \n\
    if [ -f \"/root/miniconda/etc/profile.d/conda.sh\" ]; then \n\
        . \"/root/miniconda/etc/profile.d/conda.sh\" \n\
    else \n\
        export PATH=\"/root/miniconda/bin:\$PATH\" \n\
    fi \n\
fi \n\
unset __conda_setup \n\
# <<< conda initialize <<< \n\
" > ~/set_gcc_gpu.sh \
&& chmod u+x ~/set_gcc_gpu.sh

# Configure conda-forge and mamba, install numpy, cudnn, pytorch requirements. 
COPY ./cudnn_x86_64.tar.gz ./pytorch.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& conda config --add channels conda-forge && conda config --set channel_priority strict \
&& conda install -y mamba  \
&& mamba install -y numpy  \
&& cd /app \
&& tar -xvf cudnn_x86_64.tar.gz \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& mv cudnn-linux-x86_64-9.2.1.18_cuda12-archive cudnn \
&& cp -r cudnn/lib/* $SCRATCH_GCC_GPU/lib/ \
&& cp -r cudnn/include/* $SCRATCH_GCC_GPU/include/ \
&& rm -rf /app/cudnn /app/cudnn_x86_64.tar.gz \
&& tar -xzvf pytorch.tar.gz \
&& cd /app/pytorch \
&& mamba install -y cmake ninja \
&& pip3 install -q -r requirements.txt \
&& mamba install -y mkl-static mkl-include \
&& mamba install -y -c pytorch magma-cuda124 

# Install pytorch. 
RUN cd /app/pytorch \ 
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& export USE_MPI=1 \
&& export USE_CUDA=1 \
# && export MAX_JOBS=8 \
# && CUDNN_LIBRARY_PATH=$SCRATCH_GCC_GPU/lib CUDNN_INCLUDE_PATH=$SCRATCH_GCC_GPU/include CUSPARSELT_INCLUDE_PATH=$NVHPC_ROOT/math_libs/include CUSPARSELT_LIBRARY_PATH=$NVHPC_ROOT/math_libs/lib64 CMAKE_C_COMPILER=mpicc CMAKE_CXX_COMPILER=mpic++ python3 setup.py develop \
&& export CMAKE_PREFIX_PATH='${CONDA_PREFIX:-"$(dirname $(which conda))/../"}' \
&& python3 setup.py develop \
&& python3 setup.py install \
&& rm -rf /app/pytorch /app/pytorch.tar.gz \
&& cd /app 

# torchvision, torchgeometric, e3nn. 
COPY ./torchvision.tar.gz ./pytorch_geometric.tar.gz /app/
RUN cd /app \
# torchvision.
&& tar -xvf torchvision.tar.gz && mv vision torchvision \
&& cd /app/torchvision \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& export CMAKE_PREFIX_PATH='${CONDA_PREFIX:-"$(dirname $(which conda))/../"}' \
&& python3 setup.py develop \
&& python3 setup.py install \
&& rm -rf /app/torchvision /app/torchvision.tar.gz \
# pytorch_geometric. 
&& cd /app \
&& tar -xzvf pytorch_geometric.tar.gz \
&& cd /app/pytorch_geometric \
&& pip3 install . \
&& rm -rf /app/pytorch_geometric /app/pytorch_geometric.tar.gz \
# e3nn.
&& cd /app \
&& pip3 install -q e3nn 

# Libraries after pytorch and before gpaw. 
COPY ./mpi4py.tar.gz ./h5py.tar.gz ./petsc4py.tar.gz ./slepc4py.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
# Probably installed numpy as requirements for pytorch already. 
# && mamba install -y numpy \
&& mamba install -y pandas \
&& mamba install -y cupy \
&& mamba install -y scipy \
&& mamba install -y sympy \
&& conda deactivate \
# mpi4py 
&& tar -xzvf mpi4py.tar.gz && mv mpi4py-3.1.6 mpi4py \
&& cd mpi4py \
&& MPICC=mpicc CC=gcc /root/miniconda/bin/pip3 install . \
# && LD=/usr/bin/ld pip3 install . \
&& cd .. && rm -rf mpi4py.tar.gz mpi4py \
# h5py
&& tar -xzvf h5py.tar.gz \
&& cd h5py \
&& CC=mpicc HDF5_MPI="ON" HDF5_DIR="$SCRATCH_GCC_GPU" /root/miniconda/bin/pip3 install . \
&& cd .. && rm -rf h5py.tar.gz h5py \
# petsc4py
&& tar -xzvf petsc4py.tar.gz && mv petsc4py-3.21.4 petsc4py \
&& cd petsc4py \
&& CC=mpicc CXX=mpic++ FC=mpif90 /root/miniconda/bin/pip3 install . \
&& cd .. && rm -rf petsc4py.tar.gz petsc4py \
# slepc4py
&& tar -xzvf slepc4py.tar.gz && mv slepc4py-3.21.1 slepc4py \
&& cd slepc4py \
&& CC=mpicc CXX=mpic++ FC=mpif90 SLEPC_DIR=$SCRATCH_GCC_GPU PETSC_DIR=$SCRATCH_GCC_GPU /root/miniconda/bin/pip3 install . \
&& cd .. && rm -rf slepc4py.tar.gz slepc4py \
# Resume non-source versions. 
&& conda activate \
&& mamba install -y pyqt \
&& mamba install -y matplotlib \
&& mamba install -y seaborn \
&& pip3 install -q pyvista[all] \
&& pip3 install -q pyvistaqt \
&& pip3 install -q jupyterlab \
&& mamba install -y ase \
&& mamba install -y dill \
&& mamba install -y pyyaml \
&& cd /app 

# gpaw. 
COPY ./gpaw.tar.gz ./gpaw-data.tar.gz ./siteconfig_gcc_gpu.py /app/ 
RUN cd /app \
&& tar -xvf gpaw.tar.gz && mv gpaw-24.6.0 gpaw \
&& cp /app/siteconfig_gcc_gpu.py /app/gpaw/siteconfig.py \
&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
&& cd /app/gpaw \
&& pip3 install . \
&& cd /app \
# && gpaw install-data --tar-file /app/gpaw-data.tar.gz \
# && rm -rf /app/gpaw /app/siteconfig_gcc_gpu.py /app/gpaw.tar.gz /app/gpaw-data.tar.gz \
&& rm -rf /app/gpaw /app/siteconfig_gcc_gpu.py /app/gpaw.tar.gz \
&& cd /app 

# Other libraries after gpaw and pytorch. 
# Probably need to install this in a seperate environment, as don't want to install mpich and other needed over it. 
# RUN cd /app \
#&& source ~/.bashrc && source ~/set_gcc_gpu.sh \
#&& mamba install -y <something> \


# Add actual cuda libraries linking if needed. 
RUN echo -e "\n\
export LIBCUDA_PATH=\$(find /usr/lib/wsl -name 'libcuda.so*' | head -n 1) \n \
\n\
if [ -n \"\$LIBCUDA_PATH\" ]; then \n \
    export LIBCUDA_DIR=\$(find /usr/lib/wsl -name 'libcuda.so*' -exec dirname {} \; | head -n 1 ) \n \
    export PREVIOUS_LIBRARY_PATH=\$LIBCUDA_DIR:\$PREVIOUS_LIBRARY_PATH \n \
    export PREVIOUS_LD_LIBRARY_PATH=\$LIBCUDA_DIR:\$PREVIOUS_LD_LIBRARY_PATH \n \
    ln -sf \$LIBCUDA_PATH \$CUDA_ROOT/lib64/stubs/libcuda.so; \n \
fi \n\
" >> ~/.bashrc

# Finally set the working directory to home directory. 
WORKDIR /app

CMD ["/bin/bash"]