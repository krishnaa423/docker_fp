FROM ubuntu:22.04

# Dockerfile variables
ENV BASH_ENV=~/.bashrc
ENV SHELL=/bin/bash
SHELL ["/bin/bash", "-c"]

# common 
RUN mkdir -p /app \
&& apt update  \
&& apt install -y \
  nasm \ 
  build-essential \ 
  gfortran \ 
  python3 \
  pkg-config \ 
  cmake \ 
  cmake-curses-gui \ 
  libtool \ 
  autoconf \ 
  wget \ 
  curl \ 
  git \ 
  vim \ 
  libgl1-mesa-dev \ 
  libglu1-mesa-dev \ 
  libgl1-mesa-glx \
&& echo -e "\n \
export SHELL="/usr/bin/bash" \n \
export PATH="/usr/local/bin:\$PATH" \n \
export CPATH="/usr/local/include" \n \
export LIBRARY_PATH="/usr/local/lib" \n \
export LD_LIBRARY_PATH="/usr/local/lib" \n \
" > ~/.bashrc 

# mpich
COPY ./mpich.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf mpich.tar.gz && mv mpich-* mpich \
&& cd mpich \
&& CC=gcc CXX=g++ FC=gfortran ./configure --prefix=/usr/local \
&& make -j8 && make install \
&& cd .. \
&& rm -rf mpich* 

# openblas
COPY ./openblas.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf openblas.tar.gz && mv OpenBLAS-* openblas \
&& cd openblas \
&& make USE_OPENMP=1 COMMON_OPT="-fPIC" -j8 \
&& make install PREFIX=/usr/local \
&& cd .. \
&& rm -rf openblas* 

# scalapack
COPY ./scalapack.tar.gz SLmake.inc_mpich_openmpi /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf scalapack.tar.gz && mv scalapack-* scalapack \
&& cd scalapack \
&& cp ../SLmake.inc* ./SLmake.inc \
&& make lib \
&& cp ./libscalapack.a /usr/local/lib/libscalapack.a \
&& cd .. \
&& rm -rf scalapack* SLmake.inc*

# elpa
COPY ./elpa.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf elpa.tar.gz && mv elpa-* elpa \
&& cd elpa \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=/usr/local --disable-sse --disable-sse-assembly --disable-avx --disable-avx2 --disable-avx512 CFLAGS="-O3 -fPIC" LDFLAGS="-L/usr/local/lib" LIBS="-lscalapack -lopenblas" \
&& make -j8 && make install \
&& ln -sf /usr/local/include/elpa-*/elpa /usr/local/include/elpa \
&& cp /usr/local/include/elpa-*/modules/* /usr/local/include/ \
&& cd .. \
&& rm -rf elpa* 

# fftw
COPY ./fftw3.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf fftw3.tar.gz && mv fftw-* fftw3 \
&& cd fftw3 \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=/usr/local CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared --enable-openmp --enable-mpi \
&& make -j8 && make install \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=/usr/local CFLAGS="-fPIC" FCFLAGS="-fPIC" --enable-shared --enable-openmp --enable-mpi --enable-single \
&& make -j8 && make install \
&& cd .. \
&& rm -rf fftw3* 

# hdf5
COPY ./hdf5.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf hdf5.tar.gz && mv hdf5-* hdf5 \
&& cd hdf5 \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=/usr/local --enable-fortran --enable-shared --enable-parallel \
&& make -j8 && make install \
&& cd .. \
&& rm -rf hdf5* 

# libxc
COPY ./libxc.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xvf libxc.tar.gz && mv libxc-* libxc \
&& cd libxc \
&& autoreconf -i \
&& CC=mpicc FC=mpif90 ./configure CFLAGS="-fPIC" --prefix=/usr/local \
&& make -j8 && make install \
&& cd .. \
&& rm -rf libxc* 

# petsc
COPY ./petsc.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf petsc.tar.gz && mv petsc-* petsc \
&& cd petsc \
&& ./configure --prefix=/usr/local --with-scalar-type=complex \
&& make -j8 && make install \
&& cd .. \
&& rm -rf petsc* 

# slepc
COPY ./slepc.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf slepc.tar.gz && mv slepc-* slepc \
&& cd slepc \
&& ./configure --prefix=/usr/local \
&& make SLEPC_DIR=/app/slepc PETSC_DIR=/usr/local -j8 && make SLEPC_DIR=/app/slepc PETSC_DIR=/usr/local install \
&& cd .. \
&& rm -rf slepc* 

# qe 
COPY ./qe.tar.gz ./kmesh.pl /app/ 
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf qe.tar.gz && mv qe-* qe \
&& cd qe \
&& CC=mpicc CXX=mpic++ FC=mpif90 ./configure --prefix=/usr/local --with-scalapack=yes --with-elpa-include=/usr/local/include --with-elpa-lib=/usr/local/lib/libelpa.a --with-hdf5=yes \
&& make all -j8 || true && make all -j8 && make epw -j8 \
&& make install \
&& cd .. \
&& cp ./kmesh.pl /usr/local/bin/kmesh.pl \
&& rm -rf qe* kmesh.pl 

# bgw
COPY ./bgw.tar.gz arch_gcc_cpu.mk /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf bgw.tar.gz && mv BerkeleyGW* bgw \
&& cd bgw \
&& cp ../arch_gcc_cpu.mk ./arch.mk \
&& export SCRATCH_GCC_GPU=/usr/local \
&& make all-flavors -j8 \
&& make install INSTDIR=/usr/local \
&& cd .. \
&& rm -rf arch* 

# abacus 
COPY ./abacus.tar.gz /app/
RUN cd /app \
&& source ~/.bashrc \
&& tar -xzvf abacus.tar.gz && mv abacus-* abacus \
&& cd abacus \
&& mkdir -p build \
&& CXX=mpic++ cmake -B build -DCMAKE_INSTALL_PREFIX=/usr/local \
&& cmake --build build -j8 \
&& cmake --install build \
&& cd .. \
&& rm -rf abacus* 

# miniconda
RUN cd /app \
&& source ~/.bashrc \
# Below for amd64 architectures. 
&& wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-x86_64.sh \
# Below for macos arm64 architecture. 
# && wget -O miniconda.sh https://repo.anaconda.com/miniconda/Miniconda3-latest-Linux-aarch64.sh \
&& chmod u+x *.sh \
&& ./miniconda.sh -b -p $HOME/miniconda \
&& $HOME/miniconda/bin/conda init \
&& rm -rf miniconda.sh 
RUN cd /app \
&& source ~/.bashrc \
&& conda config --add channels conda-forge \
&& conda config --set channel_priority strict \
&& conda install -y mamba 

# cmake, ninja, mkl-include, mkl-static, numpy, scipy, sympy, jax, pandas, pyqt, matplotlib, seaborn, ase, dolfinx. 
# pyvista, pyvistaqt. 
# MacOS: Commenting out mkl-static and mkl-include for arm64 architecture. 
RUN cd /app \
&& source ~/.bashrc \
&& mamba install -y \
  cmake \
  ninja \
  mkl-include \
  mkl-static \
  numpy \
  scipy \
  pandas \
  pyqt \
  matplotlib \
  seaborn \
  dill \
  pyyaml \
  ase \
  pymatgen \
&& pip3 install -q \
  networkx \
  astropy \
  pyvista \
  pyvistaqt \
  jupyterlab \
  mp_api \
&& cd bgw/xctph \
&& pip install . \
&& cd ../../ \
&& rm -rf bgw 


# torch
# Frontera: CMAKE_C_COMPILER=mpicc CMAKE_CXX_COMPILER=mpicxx CMAKE_CXX_FLAGS="-fstack-protector" MAX_JOBS=8 USE_MPI=1 USE_CUDA=0 USE_FBGEMM=0 BUILD_TEST=OFF python3 setup.py develop
# Perlmutter: CMAKE_C_COMPILER=mpicc CMAKE_CXX_COMPILER=mpicxx MAX_JOBS=16 USE_CUDA=1 USE_DISTRIBUTED=1 USE_MPI=1 USE_SYSTEM_NCCL=1 BUILD_TEST=0 USE_NNPACK=0 USE_QNNPACK=0 USE_PYTORCH_QNNPATCK=0 USE_XNNPACK=0 python3 setup.py develop
# MacOS: MAX_JOBS=1 to reduce compilation resource usage. 
RUN cd /app \
&& source ~/.bashrc \
&& git clone --recursive https://github.com/pytorch/pytorch.git 

RUN cd /app \
&& cd pytorch \
&& pip3 install -r requirements.txt \
&& export CMAKE_PREFIX_PATH=/root/miniconda \
&& USE_CUDA=0 USE_MPI=1 MAX_JOBS=3 python3 setup.py develop  

# torchvision 
# Perlmutter: CC=mpicc CXX=mpicxx MAX_JOBS=16 python3 setup.py install
RUN cd /app \
&& source ~/.bashrc \
&& git clone https://github.com/pytorch/vision.git \
&& cd vision \
&& python3 setup.py install  \
&& cd .. && rm -rf vision 

# transformers, datasets, evaluate, accelerate
RUN cd /app \
&& source ~/.bashrc \
&& pip3 install -q transformers datasets accelerate evaluate 

# torch_geometric
RUN cd /app \
&& source ~/.bashrc \
&& pip install torch_geometric 

# pyg_lib
# torch_cluster
# e3nn
RUN cd /app \
&& source ~/.bashrc \
# && pip install pyg_lib torch_scatter torch_sparse torch_cluster torch_spline_conv -f https://data.pyg.org/whl/torch-2.4.0+cpu.html \
&& pip install torch_cluster \
&& pip3 install e3nn 

# mpi4py, petsc4py, slepc4py, h5py. 
RUN cd /app \
&& source ~/.bashrc \
&& git clone https://github.com/h5py/h5py.git \
&& conda deactivate \
&& /root/miniconda/bin/pip3 install --upgrade cython \
&& MPICC=mpicc CC=gcc /root/miniconda/bin/pip3 install --force --no-cache-dir --no-binary=mpi4py mpi4py==3.1.6 \
&& cd h5py \
&& CC=mpicc HDF5_MPI="ON" HDF5_DIR="/usr/local" /root/miniconda/bin/pip3 install . \
&& cd .. && rm -rf h5py \
&& CC=mpicc CXX=mpic++ FC=mpif90 PETSC_DIR=/usr/local /root/miniconda/bin/pip3 install --no-deps --no-build-isolation petsc4py \
&& CC=mpicc CXX=mpic++ FC=mpif90 PETSC_DIR=/usr/local SLEPC_DIR=/usr/local /root/miniconda/bin/pip3 install --no-deps --no-build-isolation slepc4py 

# gpaw 
COPY ./gpaw.tar.gz siteconfig_testing.py /app/
RUN cd /app \ 
&& source ~/.bashrc \
&& tar -xzvf gpaw.tar.gz \
&& mv gpaw-* gpaw \
&& cd gpaw \
&& cp ../siteconfig_testing.py ./siteconfig.py \
&& pip3 install . \
&& cd .. \
&& rm -rf siteconfig* gpaw*

# aws
RUN cd /app \
&& source ~/.bashrc \
&& pip3 install -q awscli

# # Temporary instead of above pacakages. 
# RUN cd /app \
# && mamba install -y pytorch torchvision torchaudio cpuonly -c pytorch \
# && pip3 install torch_geometric \
# && mamba install -y hdf5 h5py 

# Other packages
RUN cd /app \
&& source ~/.bashrc \
&& mamba install -y scikit-learn joblib xgboost \
&& mamba create -n daskmpi-env python=3.12 dask-mpi \
&& pip3 install -q jax spacy \
&& python3 -m spacy download en_core_web_sm \
&& pip3 install -q tensorboard torchserve torch-model-archiver \
&& mamba create -y -n dolfinx-env python=3.12 fenics-dolfinx \
&& conda install -y sqlite --force-reinstall \
&& pip install PyOpenGL PyOpenGL_accelerate --no-build-isolation \
&& pip3 install -q fp-workflow \
&& pip3 install lark \
&& rm -rf bgw.tar.gz 